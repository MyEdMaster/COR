[{"/Users/leon/Documents/VSCodeProject/COR_test/src/index.js":"1","/Users/leon/Documents/VSCodeProject/COR_test/src/App.js":"2","/Users/leon/Documents/VSCodeProject/COR_test/src/serviceWorker.js":"3","/Users/leon/Documents/VSCodeProject/COR_test/src/page/test-page/index.js":"4","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/index.js":"5","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/PDFPage/index.js":"6","/Users/leon/Documents/VSCodeProject/COR_test/src/tool/fetch-help.js":"7","/Users/leon/Documents/VSCodeProject/COR_test/src/page/Nav/index.js":"8","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/HomePage/index.js":"9","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/Worksheet/index.js":"10","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/QA/index.js":"11","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/PDFPage/Menu/index.js":"12","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/PDFPage/ask-question/index.js":"13","/Users/leon/Documents/VSCodeProject/COR_test/src/page/RRH/Component/speech-syn/index.js":"14","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/Worksheet/mul-answer-component/index.js":"15","/Users/leon/Documents/VSCodeProject/COR_test/src/tool/report_system/index.js":"16","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/Worksheet/answer-component/index.js":"17"},{"size":821,"mtime":1611650795414,"results":"18","hashOfConfig":"19"},{"size":1008,"mtime":1611650821035,"results":"20","hashOfConfig":"19"},{"size":4951,"mtime":1611650101410,"results":"21","hashOfConfig":"19"},{"size":1107,"mtime":1611650766939,"results":"22","hashOfConfig":"19"},{"size":2944,"mtime":1611650101356,"results":"23","hashOfConfig":"19"},{"size":11305,"mtime":1612392647288,"results":"24","hashOfConfig":"19"},{"size":190,"mtime":1611650101411,"results":"25","hashOfConfig":"19"},{"size":7305,"mtime":1611650101392,"results":"26","hashOfConfig":"19"},{"size":3124,"mtime":1611651015682,"results":"27","hashOfConfig":"19"},{"size":8147,"mtime":1611650993538,"results":"28","hashOfConfig":"19"},{"size":19971,"mtime":1611650973931,"results":"29","hashOfConfig":"19"},{"size":2360,"mtime":1611650101331,"results":"30","hashOfConfig":"19"},{"size":22812,"mtime":1611650939594,"results":"31","hashOfConfig":"19"},{"size":1763,"mtime":1611650101394,"results":"32","hashOfConfig":"19"},{"size":13735,"mtime":1611650101356,"results":"33","hashOfConfig":"19"},{"size":4499,"mtime":1611650101411,"results":"34","hashOfConfig":"19"},{"size":6688,"mtime":1611650101355,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"9ndtlc",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"38"},"/Users/leon/Documents/VSCodeProject/COR_test/src/index.js",[],["83","84"],"/Users/leon/Documents/VSCodeProject/COR_test/src/App.js",["85","86"],"import React, {Component} from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\n//import AnimatedRouter from 'react-animated-router';\n// import 'react-animated-router/animate.css';\nimport {TestPage} from \"./page/test-page\";\nimport {COR} from \"./page/COR\";\n\n// import {ProblemList} from \"./CRUD_module/problem_list\"\n// import {ProblemDetail} from \"./CRUD_module/problem_detail\";\n\n\nexport class App extends Component {\n    render() {\n        return (\n            <Route>\n                <Switch>\n                    <Route\n                        path=\"/cor\"\n                        component={routeProps => <COR {...routeProps} />}\n                    />\n\n                    <Route\n                        path=\"/test\"\n                        component={routeProps => <TestPage {...routeProps} />}\n                    />\n                    <Redirect to=\"/cor\"/>\n                </Switch>\n            </Route>\n\n        );\n    }\n}\n","/Users/leon/Documents/VSCodeProject/COR_test/src/serviceWorker.js",[],"/Users/leon/Documents/VSCodeProject/COR_test/src/page/test-page/index.js",["87"],"//import React from \"react\";\n\n\n// import 'hopscotch/dist/css/hopscotch.css';\nimport React, { Component } from 'react';\nimport classes from './index.module.css'\n\n\nexport class TestPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n\n    }\n\n\n    render() {\n\n        return (\n            <div className='d-flex'>\n                <div>\n                    <div className={`${classes.rectangle}`}>Review</div>\n                    <div className={classes.arrow}></div>\n                </div>\n                <div style={{marginLeft:'-20px'}}>\n                    <div className={classes.arrow2}></div>\n                    <div className={classes.rectangle}>Worksheet</div>\n                    <div className={classes.arrow}></div>\n                </div>\n                <div style={{marginLeft:'-20px'}}>\n                    <div className={classes.arrow2}></div>\n                    <div className={classes.rectangle}>Answer</div>\n                    <div className={classes.arrow}></div>\n                </div>\n\n            </div>\n        );\n    }\n}\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/index.js",["88"],"import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Nav} from \"../Nav\";\nimport {CORPdf} from \"./PDFPage/index.js\";\nimport {AskQuestionCOR} from \"./PDFPage/ask-question\";\nimport {CORHome} from \"./HomePage\";\nimport {CORWorkSheet} from \"./Worksheet\";\nimport {CORMenu} from \"./PDFPage/Menu\";\nimport {CORQA} from \"./QA\";\n\nexport class COR extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n\n    }\n\n    render() {\n        return (\n          <div>\n              <Nav/>\n\n              <CORMenu/>\n              <Switch>\n                  <Route\n                      path={`${this.props.match.url}/home`}\n                      component={routeProps => <CORHome {...routeProps} />}\n                  />\n                  <Route\n                      path={`${this.props.match.url}/pdf`}\n                      component={routeProps => <CORPdf {...routeProps} />}\n                  />\n                  <Route\n                      path={`${this.props.match.url}/worksheet`}\n                      component={routeProps => <CORWorkSheet {...routeProps} />}\n                  />\n                  <Route\n                      path={`${this.props.match.url}/qa`}\n                      component={routeProps => <CORQA {...routeProps} />}\n                  />\n\n                  {/*<Route*/}\n                      {/*path={`${this.props.match.url}/intro`}*/}\n                      {/*component={routeProps => <ComplexIntro {...routeProps} />}*/}\n                  {/*/>*/}\n                  {/*<Route*/}\n                      {/*path={`${this.props.match.url}/add`}*/}\n                      {/*component={routeProps => <ComplexAdd {...routeProps} />}*/}\n                  {/*/>*/}\n                  {/*<Route*/}\n                      {/*path={`${this.props.match.url}/divi`}*/}\n                      {/*component={routeProps => <ComplexDivi {...routeProps} />}*/}\n                  {/*/>*/}\n                  {/*<Route*/}\n                      {/*path={`${this.props.match.url}/feedback`}*/}\n                      {/*component={routeProps => <ComplexFeedback {...routeProps} />}*/}\n                  {/*/>*/}\n                  {/*<Route*/}\n                      {/*path={`${this.props.match.url}/mult`}*/}\n                      {/*component={routeProps => <ComplexMult {...routeProps} />}*/}\n                  {/*/>*/}\n                  {/*<Route*/}\n                      {/*path={`${this.props.match.url}/subt`}*/}\n                      {/*component={routeProps => <ComplexSubt {...routeProps} />}*/}\n                  {/*/>*/}\n                  {/*<Route*/}\n                      {/*path={`${this.props.match.url}/home`}*/}\n                      {/*component={routeProps => <ComplexHome {...routeProps} />}*/}\n                  />\n                  <Redirect to={`${this.props.match.url}/home`} />\n\n              </Switch>\n\n          </div>\n\n        );\n    }\n}\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/PDFPage/index.js",["89","90","91","92","93","94","95","96","97","98","99","100","101"],"/Users/leon/Documents/VSCodeProject/COR_test/src/tool/fetch-help.js",[],"/Users/leon/Documents/VSCodeProject/COR_test/src/page/Nav/index.js",["102","103","104","105","106","107","108"],"import React from \"react\";\nimport {withRouter} from 'react-router-dom';\nimport {\n    MDBInput,\n    MDBNavbar,\n    MDBNavbarNav,\n    MDBNavItem,\n    MDBIcon,\n    MDBSideNavItem,\n    MDBSideNavCat,\n    MDBSideNavNav,\n    MDBSideNav, MDBNavbarToggler, MDBCollapse,\n} from \"mdbreact\";\nimport classes from './index.module.css'\nclass NavReact extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggleStateA: false\n        };\n    }\n\n    handleToggleClickA = () => {\n        this.setState({\n            toggleStateA: !this.state.toggleStateA\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"deep-purple-skin\">\n                    {/*<div className=\"deep-purple-skin\">*/}\n                        {/*<MDBSideNav*/}\n                            {/*triggerOpening={this.state.toggleStateA}*/}\n                            {/*bg=\"https://mdbootstrap.com/img/Photos/Others/sidenav4.jpg\"*/}\n                            {/*mask=\"strong\"*/}\n                            {/*hidden*/}\n                        {/*>*/}\n                            {/*<div*/}\n                                {/*className=\"py-1\"*/}\n                                {/*onClick={() => {this.props.history.push('/home');}}*/}\n                                {/*style={{*/}\n                                    {/*cursor:'pointer',*/}\n                                    {/*textAlign:'center',*/}\n                                    {/*borderStyle:'solid',*/}\n                                    {/*borderWidth:'0 0 1px 0',*/}\n                                    {/*borderColor:'#f5f5f5'*/}\n                                {/*}}*/}\n                            {/*>*/}\n\n                                {/*<img className='img-fluid w-75 justify-content-center' src='https://myedmaster.oss-us-east-1.aliyuncs.com/A-list Empire logo.png'/>*/}\n\n                            {/*</div>*/}\n                            {/*<MDBSideNavNav>*/}\n                                {/*<MDBSideNavCat*/}\n                                    {/*name=\"Reading\"*/}\n                                    {/*id=\"submit-blog-cat\"*/}\n                                    {/*icon=\"chevron-right\"*/}\n                                    {/*style={{*/}\n                                        {/*fontFamily:'Comic Sans MS',*/}\n                                        {/*fontSize:'16px',*/}\n                                        {/*color: \"#ffffff\",*/}\n                                    {/*}}*/}\n                                {/*>*/}\n                                    {/*<MDBSideNavItem className={classes.subMenu} onClick={() => {this.props.history.push('/rrh/cover');}}>Little Red Riding Hood</MDBSideNavItem>*/}\n                                    {/*/!*<MDBSideNavItem>Registration form</MDBSideNavItem>*!/*/}\n                                    {/*<MDBSideNavItem className={classes.subMenu} onClick={() => {this.props.history.push('/hapcover');}}>Horse and Porcupine</MDBSideNavItem>*/}\n                                {/*</MDBSideNavCat>*/}\n                                {/*<MDBSideNavCat*/}\n                                    {/*name=\"Math\"*/}\n                                    {/*id=\"submit-blog-cat\"*/}\n                                    {/*icon=\"chevron-right\"*/}\n                                    {/*style={{*/}\n                                        {/*fontFamily:'Comic Sans MS',*/}\n                                        {/*fontSize:'16px',*/}\n                                        {/*color: \"#ffffff\",*/}\n                                    {/*}}*/}\n                                {/*>*/}\n                                    {/*<MDBSideNavItem className={classes.subMenu} onClick={() => {this.props.history.push('/complex');}}>Complex Numbers</MDBSideNavItem>*/}\n                                    {/*<MDBSideNavItem className={classes.subMenu} onClick={() => {this.props.history.push('/foil');}}>Multiplying Binomials Using FOIL</MDBSideNavItem>*/}\n\n                                {/*</MDBSideNavCat>*/}\n\n                                {/*/!*<MDBSideNavCat*!/*/}\n                                {/*/!*name=\"Science\"*!/*/}\n                                {/*/!*id=\"contact-me-cat\"*!/*/}\n                                {/*/!*icon=\"chevron-right\"*!/*/}\n                                {/*/!*style={{*!/*/}\n                                {/*/!*fontFamily:'Comic Sans MS',*!/*/}\n                                {/*/!*fontSize:'16px',*!/*/}\n                                {/*/!*color: \"#ffffff\",*!/*/}\n                                {/*/!*}}*!/*/}\n                                {/*/!*>*!/*/}\n                                {/*/!*<MDBSideNavItem onClick={() => {this.props.history.push('/home');}}className={classes.subMenu}>Play basketball</MDBSideNavItem>*!/*/}\n\n                                {/*/!*</MDBSideNavCat>*!/*/}\n                            {/*</MDBSideNavNav>*/}\n                        {/*</MDBSideNav>*/}\n                    {/*</div>*/}\n                    <MDBNavbar className=\"danger-color-dark\" expand=\"md\"  style={{color:'#32313B'}}>\n\n                        <MDBNavbarToggler onClick={this.handleTogglerClick} />\n                        <MDBCollapse isOpen={this.state.collapsed} navbar>\n                            <MDBNavbarNav left>\n                                {/*<MDBNavItem>*/}\n                                    {/*<div*/}\n                                        {/*onClick={this.handleToggleClickA}*/}\n                                        {/*key=\"sideNavToggleA\"*/}\n                                        {/*style={{*/}\n                                            {/*lineHeight: \"10px\",*/}\n                                            {/*marginRight: \"1em\",*/}\n                                            {/*verticalAlign: \"middle\"*/}\n                                        {/*}}*/}\n                                    {/*>*/}\n                                        {/*<MDBIcon icon=\"bars\" size=\"2x\" className=\"mt-1\" style={{color:'white'}}/>*/}\n                                    {/*</div>*/}\n                                {/*</MDBNavItem>*/}\n\n                            </MDBNavbarNav>\n                            <MDBNavbarNav left>\n                                <MDBNavItem\n                                    className=\"d-none d-md-inline\"\n                                    onClick={() => {this.props.history.push('/');}}\n                                    style={{\n                                        cursor:'pointer',\n                                        //fontFamily:'Comic Sans MS',\n                                        fontSize: '25px',\n                                        fontStyle: 'normal',\n                                        color:'white',\n                                        fontWeight: '700',\n                                    }}\n                                >\n                                    COR\n                                </MDBNavItem>\n                            </MDBNavbarNav>\n                        </MDBCollapse>\n                    </MDBNavbar>\n                </div>\n                {/*<div style={{height:'53px'}}>*/}\n\n                {/*</div>*/}\n            </div>\n\n        );\n    }\n}\nexport const Nav = withRouter(NavReact)\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/HomePage/index.js",["109"],"import React from 'react';\n\nimport {MDBRow, MDBCol,MDBBtn,MDBIcon} from 'mdbreact'\n\nimport classes from './index.module.css'\n// import {InlineMath} from \"react-katex\";\n\n\n\nexport class CORHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            test:'',\n            render:0\n\n        };\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div className={classes.font}>\n                    INTERMEDIATE COR REFRESHER\n                </div>\n                {/*<div className={classes.font2}>*/}\n                    {/*SYLLABUS*/}\n                {/*</div>*/}\n                <MDBRow>\n                    <MDBCol size=\"2\">\n\n                    </MDBCol>\n                    <MDBCol size=\"8\" className={classes.font3}>\n                        <h4 style={{color:'#CC0000'}}>COURSE OVERVIEW</h4>\n                        <p>Experienced contracting officer's representatives (COR) know that projects can present a variety of\n                            challenges and responsibilities. This course will provide refresher training and an update on\n                            contracting principles that can build a strong foundation for future contracting work. You will be\n                            faced with various, relevant simulations to test your critical thinking abilities.</p>\n                        <h4 style={{color:'#CC0000'}}>Learning Objectives</h4>\n                        <ul type=\"square\">\n                            <li>Discuss the purpose, process, and the role and responsibilities of the COR as a member of the\n                                market research team</li>\n                            <li>Identify the role and responsibilities of the COR related to the development of the solicitation</li>\n                            <li>Define best value and discuss the processes to achieve it</li>\n                            <li>Identify COR responsibilities and activities for the postaward orientation and development of the\n                                COR Work Plan</li>\n                            <li>Discuss the government's method of assuring quality through inspection and the COR's role</li>\n                            <li>Explain the COR’s role and responsibilities in reviewing contractor invoices and recommending payment</li>\n                            <li>Explain the COR's role in addressing contract remedies for different situations</li>\n                            <li>Explain the role of the COR in evaluating a contractor's performance and contract closeout</li>\n                        </ul>\n                    </MDBCol>\n                </MDBRow>\n\n\n                <MDBRow center>\n                    <MDBCol size=\"2\" className={classes.btn} onClick={() => {this.props.history.push('/cor/pdf');}}>\n                        <span><MDBIcon icon=\"hand-point-right\" className='red-text px-2'/></span>\n                        <span>\n                            START LEARNING\n                        </span>\n                    </MDBCol>\n                </MDBRow>\n            </div>\n\n        );\n    }\n}\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/Worksheet/index.js",["110","111","112","113","114","115","116","117"],"import React from 'react';\n\nimport classes from './index.module.css'\n\n\nimport {MDBBtn, MDBCard, MDBCol, MDBIcon, MDBModalBody, MDBRow} from \"mdbreact\";\nimport {cancelSyn, handleSyn} from \"../../RRH/Component/speech-syn\";\n\nimport {url} from \"../../../tool/fetch-help\";\nimport {AnswerComponent} from \"./answer-component\";\nimport {MulAnswerComponent} from \"./mul-answer-component\";\n// import Joyride from 'react-joyride';\n\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = 'en-US';\n\nexport class CORWorkSheet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listening: false,\n            speechState:'Click to start...',\n            hints:'',\n            backendjson:'',\n            backend:'',\n            question:'',\n            answer:'',\n            type:0,\n            tag:'',\n            render:1,\n            index:0,\n            feedback:'',\n            steps: [\n                {\n                    target: \".question\",\n                    content: \"We ask your questions to make sure if you understand our story. Once your answer is right, there will be a new question\"\n                },\n                {\n                    target: \".input\",\n                    content: \"Input your answer here\"\n                }\n            ]\n        };\n    }\n    // componentDidMount() {\n    //     const option={\n    //         method:'GET',\n    //         headers: {\n    //             'content-type': 'application/json',\n    //         }\n    //     }\n    //     fetch(`${url}/feedback/CN/question`,option)\n    //         .then(response=>response.json())\n    //         .then(question=>{\n    //             this.setState({\n    //                 backend:question,\n    //                 render:1\n    //             })\n    //         })\n    // }\n    // componentWillMount() {\n    //\n    // }\n\n\n    searchAnswer=(value)=>{\n        //cancelSyn()\n        console.log(this.state.backend.content[this.state.index].id)\n        const option={\n            method:'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body:JSON.stringify({\n                question_id:this.state.backend.content[this.state.index].id,\n                answer:value,\n                // \"question\":this.state.backend.content[this.state.index].id,\n                // \"answer\":value\n            })\n        };\n        fetch(`${url}/analyse_answer/a2`,option)\n            .then(response=>response.json())\n            .then(answer=>{\n                this.setState({\n                    backendjson:answer\n                });\n                // let rate = parseFloat(answer.score);\n                switch (answer.type) {\n                    case '1':\n                        this.setState({\n                            feedback:'',\n                            index:this.state.index + 1,\n                            type:1,\n                            tag:'Yes! You got it.'\n                        });\n                        handleSyn('Yes! You got it.');\n                        if(this.state.index <= this.state.backend.content.length){\n                            handleSyn(this.state.backend.content[this.state.index].question.replace('?', '.'))\n                        }\n                        break;\n                    case '2':\n                        this.setState({\n                            tag:'Is that what you are answering?',\n                            feedback:answer.answer,\n                            type:2\n                        });\n                        handleSyn('Is that what you are answering');\n                        handleSyn((answer.answer.replace('?', '.')));\n\n                        break;\n                    case '3':\n                        this.setState({\n                            feedback:answer.answer,\n                            tag:'No.',\n                            type:3\n                        });\n                        handleSyn('No, the answer is');\n                        handleSyn((answer.answer.replace('?', '.')));\n                }\n            })\n    };\n\n    //--------------Speech Recognition--------------\n\n    render() {\n        cancelSyn();\n        if (this.state.render === 1){\n            const { steps } = this.state;\n            //console.log(this.state.backend.content[0])\n            return (\n                <div className='cell-wall'>\n                    <div className='cell-membrane mb-5'>\n                        <div className={classes.title}>TABLE: PERFORMANCE REQUIREMENTS SUMMARY (PRS)</div>\n                        <div className='d-flex'>\n                            <div className={classes.form1}>\n                                <div className={classes.formtitle}>Requirement</div>\n                                <div className={classes.question}>What do we want to accomplish as the end result of this contract?</div>\n                                <AnswerComponent id={0}/>\n\n                            </div>\n                            <div className={classes.form1}>\n                                <div className={classes.formtitle}>Tasks and Critical Subtasks</div>\n                                <div className={classes.question}>What tasks must be accomplished to give us the end result?</div>\n                                    <AnswerComponent id={1}/>\n\n                                </div>\n                                <div className={classes.form1}>\n                                    <div className={classes.formtitle}>\n                                        Performance Standards  <div className={classes.formtitle2}>\n                                        (There are 10 standard. Enter them one at a time, in any order, and press \"submit\" after each one.)\n                                    </div>\n                                    </div>\n                                    <div className={classes.question}>What should the standard be for completeness, reliability, accuracy, timeliness, customer satisfaction, quality, and/or cost?</div>\n                                    <MulAnswerComponent/>\n                                </div>\n                                <div className={classes.form1}>\n                                    <div className={classes.formtitle}>Acceptable Quality Level</div>\n                                    <div className={classes.question}>How much error will we accept?</div>\n                                    <AnswerComponent id={2}/>\n                                </div>\n                                <div className={classes.form1}>\n                                    <div className={classes.formtitle}>Method of Monitoring</div>\n                                    <div className={classes.question}>How will we determine that success has been achieved?</div>\n                                    <AnswerComponent id={3}/>\n                                </div>\n                                <div className={classes.form1}>\n                                    <div className={classes.formtitle}>Incentives</div>\n                                    <div className={classes.question}>How will we reward good performance or address poor performance?</div>\n                                    <AnswerComponent id={4}/>\n                                </div>\n                            <div className={classes.form2}>\n                                <div className={classes.formtitle}>Disincentives</div>\n                                <div className={classes.question}>How will we reward good performance or address poor performance?</div>\n                                <AnswerComponent id={5}/>\n                            </div>\n\n                            </div>\n                        </div>\n\n                    </div>\n                    );\n                    }\n                    else{\n                    return(\n                    null\n                    );\n                }\n                    }\n                    }\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/QA/index.js",["118","119","120","121"],"import React from 'react';\nimport classes from './index.module.css'\n\n\nimport {MDBBtn, MDBCard, MDBCol, MDBIcon, MDBModalBody, MDBRow} from \"mdbreact\";\nimport {handleSyn} from \"../../RRH/Component/speech-syn\";\nimport {cancelSyn} from \"../../RRH/Component/speech-syn\";\nimport {url} from \"../../../tool/fetch-help\";\n// import Joyride from 'react-joyride';\nimport {handleSysAskQues} from \"../../../tool/report_system\";\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = 'en-US';\n\nexport class CORQA extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listening: false,\n            speechState:'Click the microphone icon to speak...',\n            // speechState:'Hold down the CTRL to speak...',\n            hints:'',\n            backendjson:'',\n            backend:'',\n            question:'',\n            answer:'',\n            type:0,\n            tag:'',\n            render:0,\n            index:0,\n            feedback:'',\n            btn:1,\n            next:0,\n            steps: [\n                {\n                    target: \".question\",\n                    content: \"We ask your questions to make sure if you understand our story. Once your answer is right, there will be a new question\"\n                },\n                {\n                    target: \".input\",\n                    content: \"Input your answer here\"\n                }\n            ]\n        };\n        this.toggleListen = this.toggleListen.bind(this);\n        this.handleListen = this.handleListen.bind(this)\n    }\n    componentDidMount() {\n        // document.addEventListener(\"keydown\", this.onKeyDown);\n        // document.addEventListener(\"keyup\", this.onKeyUp);\n        const option={\n            method:'GET',\n            headers: {\n                'content-type': 'application/json',\n            }\n        };\n        fetch(`${url}/CheckAnswer/2/get_question`,option)\n            .then(response=>response.json())\n            .then(question=>{\n                this.setState({\n                    backend:question,\n                    render:1\n                });\n                handleSyn(this.state.backend.content[0].question.replace('?', '.'))\n            })\n    }\n    componentWillMount() {\n        // document.removeEventListener(\"keydown\", this.onKeyDown);\n        // document.removeEventListener(\"keyup\", this.onKeyUp);\n        handleSyn(this.state.answer)\n    }\n\n    scoreRange=(rate)=>{\n        if(rate>0.9) return '1';\n        else if(rate>0.8) return '2';\n        else if(rate>0.5) return '3';\n        else return '4';\n    };\n    nextBtn = ()=>{\n        return(\n            <button\n                onClick={()=>{\n                    cancelSyn();\n                    this.setState({\n                        index:this.state.index + 1,\n                        type:'0'\n                    });\n\n                    if(this.state.index < this.state.backend.content.length - 1){\n                        handleSyn('The next question is');\n                        handleSyn(this.state.backend.content[this.state.index+1].question.replace('?', '.'))\n                    }\n                }}\n                className={classes.btn2}\n            >\n                Next Question\n            </button>\n        )\n    };\n    hint = (type) =>{\n        switch(type){\n            case '1':\n                return(\n                    <div className='py-1 px-3 '>\n                        <p className={classes.fb2}>{this.state.tag}</p>\n                        <p className={classes.fb2}>{this.state.feedback}</p>\n                    </div>\n                );\n            case '2':\n                return(\n                    <div className='py-1 px-3 '>\n                        <p className={classes.fb2}>{this.state.tag}</p>\n                        <p className={classes.fb2}>{this.state.feedback}</p>\n                        {this.state.btn ===1?(\n                            <div className=\"d-flex justify-content-center align-items-center\">\n                                <MDBBtn\n                                    tag=\"a\" floating className=\"green\"\n                                    onClick={()=>{\n                                        cancelSyn();\n                                        this.setState({\n                                            index:this.state.index + 1,\n                                            btn:0,\n                                            answer:'',\n                                            tag:'Yes, you got it',\n                                            feedback:'',\n                                        });\n                                        handleSyn('Yes, you got it.');\n\n                                        if(this.state.index < this.state.backend.content.length - 1){\n                                            handleSyn('The next question is');\n                                            handleSyn(this.state.backend.content[this.state.index+1].question.replace('?', '.'))\n                                        }\n                                    }}\n                                >\n                                    <MDBIcon icon=\"check\" />\n                                </MDBBtn>\n                                <MDBBtn\n                                    tag=\"a\" floating className=\"red lighten-1\"\n                                    onClick={()=>{\n                                        cancelSyn();\n                                        this.setState({\n                                            tag:'No',\n                                            btn:0,\n                                            next:1,\n                                            feedback:this.state.backendjson[3],\n                                            // index:this.state.index + 1,\n                                            answer:'',\n                                        });\n                                        handleSyn('No, the answer is');\n                                        handleSyn((this.state.backendjson[3].replace('?', '.')));\n                                    }}\n                                >\n                                    <MDBIcon icon=\"times\" />\n                                </MDBBtn>\n                            </div>\n                        ):(null)}\n\n                        {this.state.next?this.nextBtn():null}\n                    </div>\n                );\n\n            case '3':\n                return(\n                    <div className='py-1 px-3 '>\n                        <p className={classes.fb2}>{this.state.tag}</p>\n                        {/*<p className={classes.fb2}>{this.state.feedback}</p>*/}\n                    </div>\n                );\n            case '4':\n                return(\n                    <div className='py-1 px-3 '>\n                        <p className={classes.fb2}>{this.state.tag}</p>\n                        <p className={classes.fb2}>{this.state.feedback}</p>\n                        {this.nextBtn()}\n                    </div>\n                );\n\n\n        }\n    };\n    searchAnswer=(value)=>{\n        cancelSyn();\n        // console.log(this.state.backend.content[this.state.index].id);\n        const option={\n            method:'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body:JSON.stringify({\n                question_id:this.state.backend.content[this.state.index].id,\n                answer:value,\n                // \"question\":this.state.backend.content[this.state.index].id,\n                // \"answer\":value\n            })\n        };\n        fetch(`${url}/CheckAnswer/2`,option)\n            .then(response=>response.json())\n            .then(answer=>{\n                this.setState({\n                    backendjson:answer[0]\n                });\n                handleSysAskQues(answer[0],this.state.answer,this.state.backend.content[this.state.index].question);\n                let rate = parseFloat(answer[0][0]);\n                console.log(rate);\n                let type = this.scoreRange(rate);\n                switch (type) {\n                    case '1':\n                        this.setState({\n                            feedback:'',\n                            index:this.state.index + 1,\n                            type:'1',\n                            answer:'',\n                            tag:'Yes! You got it.'\n                        });\n                        handleSyn('Yes! You got it.');\n\n                        if(this.state.index < this.state.backend.content.length){\n                            handleSyn('Next question is');\n                            handleSyn(this.state.backend.content[this.state.index].question.replace('?', '.'))\n                        }\n                        break;\n                    case '2':\n                        this.setState({\n                            tag:'Is that what you are answering?',\n                            btn:1,\n                            feedback:answer[0][3],\n                            type:'2'\n                        });\n                        handleSyn('Is that what you are answering');\n                        handleSyn((answer[0][3].replace('?', '.')));\n\n                        break;\n                    case '3':\n                        this.setState({\n                            tag:'Could you rephrase your answer',\n                            feedback:answer[0][3],\n                            type:'3'\n                        });\n                        handleSyn('Could you rephrase your answer');\n\n\n                        break;\n                    case '4':\n                        this.setState({\n                            feedback:answer[0][3],\n                            tag:'No.',\n                            answer:'',\n                            type:'4'\n                        });\n                        handleSyn('No, the answer is');\n                        handleSyn((answer[0][3].replace('?', '.')));\n                }\n            })\n    };\n\n    //--------------Speech Recognition--------------\n    // onKeyDown = (e) => {\n    //     switch( e.keyCode) {\n    //         case 17:\n    //             this.toggleListen();\n    //             break\n    //     }\n    // };\n    // onKeyUp = (e) => {\n    //     switch( e.keyCode) {\n    //         case 17:\n    //             this.toggleListen();\n    //             break\n    //     }\n    // };\n    toggleListen() {\n        cancelSyn();\n        this.setState({\n            listening: !this.state.listening\n        }, this.handleListen)\n    }\n\n    handleListen() {\n\n        // console.log('listening?', this.state.listening)\n\n        if (this.state.listening) {\n            recognition.start();\n            recognition.onend = () => {\n                this.setState({\n                    speechState:'...continue listening...'\n                });\n                recognition.start()\n            }\n\n        } else {\n            recognition.stop();\n            recognition.onend = () => {\n                this.setState({\n                    // speechState:'Hold down the CTRL to speak...'\n                    speechState:'Click the microphone icon to speak...'\n                });\n            }\n        }\n\n        recognition.onstart = () => {\n            this.setState({\n                // speechState:'Listening...Release the CTRL to stop'\n                speechState:'Listening...click the icon to stop'\n            });\n        };\n\n        let finalTranscript = '';\n        recognition.onresult = event => {\n            let interimTranscript = '';\n\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n                const transcript = event.results[i][0].transcript;\n                if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n                else interimTranscript += transcript;\n            }\n\n            this.setState({\n                answer:finalTranscript\n            });\n            document.getElementById('interim').innerHTML = interimTranscript;\n            document.getElementById('final').value = finalTranscript;\n\n            //-------------------------COMMANDS------------------------------------\n\n            const transcriptArr = finalTranscript.split(' ');\n            const stopCmd = transcriptArr.slice(-3, -1);\n            console.log('stopCmd', stopCmd);\n\n            if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening'){\n                recognition.stop();\n                recognition.onend = () => {\n                    console.log('Stopped listening per command');\n                    const finalText = transcriptArr.slice(0, -3).join(' ');\n                    document.getElementById('final').value = finalText\n                }\n            }\n        }\n\n        //-----------------------------------------------------------------------\n\n        recognition.onerror = event => {\n            console.log(\"Error occurred in recognition: \" + event.error)\n        }\n\n    }\n\n    render() {\n        // cancelSyn();\n        if (this.state.render === 1){\n            const { steps } = this.state;\n            return (\n                <div className={`${classes.body} align-content-center w-100 h-100 text-center`}>\n                    {/*{cancelSyn()}*/}\n                    {/* <Joyride\n                        steps={steps}\n                        continuous={true}\n                        scrollToFirstStep={true}\n                        scrollToSteps={false}\n                        styles={{\n                            options: {\n                                primaryColor: '#CC0000',\n                                zIndex: 1000,\n                            }\n                        }}\n                    /> */}\n\n                    <div className=\"d-flex align-items-baseline justify-content-center\">\n                        <div className={classes.title1}>\n                            Assessment\n                        </div>\n                    </div>\n                    <MDBRow>\n                        <MDBCol size=\"2\">\n\n                        </MDBCol>\n                        <MDBCol size=\"8\">\n                            <div className={classes.ph}>\n                                Great! Now you finish the course and we have some question for you to answer.\n                            </div>\n                            <br/>\n\n                            <div className={classes.border} style={{borderWidth:'1px'}}>\n\n                                <p className={`${classes.ph}`}>\n                                    {this.state.index < this.state.backend.content.length?\n                                        this.state.backend.content[this.state.index].question\n                                        :'All questions have been done!'}\n                                </p>\n\n                                <div className=\"d-flex justify-content-center align-content-start mt-3 mb-3\">\n                                    <div className=\"flex-grow-1\">\n                                        <form\n                                            autoComplete=\"off\"\n                                            onSubmit = {(e) => {\n                                                e.preventDefault();\n                                            }}\n                                        >\n                                        <input\n                                            id='final'\n                                            className={`form-control form-control-lg input`}\n                                            placeholder=\"Answer question here\"\n                                            style={{\n                                                borderStyle:'solid',\n                                                borderWidth:'1px',\n                                                borderColor:'#CC0000',\n                                                borderRadius:'15px',\n                                                fontFamily:'\\'Rajdhani\\', sans-serif',\n                                                fontSize:'22px',\n                                            }}\n                                            value={this.state.answer}\n                                            onChange={(e) => {\n                                                const str=e.target.value;\n                                                this.setState({\n                                                    answer: str\n                                                });\n                                            }}\n\n                                            onKeyDown={(e) =>{\n                                                if(e.keyCode===13){\n                                                    if(this.state.answer===''){\n                                                        alert('Please input your answer')\n                                                    }\n                                                    else{\n                                                        this.searchAnswer(this.state.answer)\n                                                    }}\n                                            }}\n                                        />\n                                        </form>\n                                    </div>\n                                    <div className=\"ml-3\">\n                                        <MDBBtn\n                                            tag=\"a\" floating color=\"red\" style={{margin:'6px'}}\n                                            onClick={()=>{\n                                                if(this.state.answer===''){\n                                                    alert('Please input your answer')\n                                                }\n                                                else{\n                                                    this.searchAnswer(this.state.answer)\n                                                }\n                                            }}\n                                        >\n                                            <MDBIcon icon=\"question\" />\n                                        </MDBBtn>\n                                    </div>\n                                    <div className=\"ml-1\">\n                                        <MDBBtn\n                                            tag=\"a\" floating color=\"white\" style={{margin:'6px'}}\n                                            onClick={this.toggleListen}\n                                        >\n                                            <MDBIcon icon=\"microphone\" className='red-text'/>\n                                        </MDBBtn>\n\n                                    </div>\n                                </div>\n                                <div>\n                                    <div className={classes.body2}>{this.state.speechState}</div>\n                                    <div id='interim'></div>\n                                </div>\n                                <div className=\"mt-3\">\n                                    <MDBCard\n                                        size=\"8\"\n                                        text=\"white\"\n                                        className=\"w-100 grey lighten-4\"\n                                        style={{boxShadow:'none', borderRadius:'0px'}}\n                                    >\n                                        {this.hint(this.state.type)}\n\n                                    </MDBCard>\n                                </div>\n                            </div>\n                            <br/>\n                        </MDBCol>\n\n                    </MDBRow>\n\n                </div>\n            );\n        }\n        else{\n            return(\n                null\n            );\n        }\n    }\n}\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/PDFPage/Menu/index.js",[],"/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/PDFPage/ask-question/index.js",["122","123","124"],"'use strict'\nimport React from 'react';\nimport classes from './index.module.css';\n\nimport {MDBBtn, MDBCard,MDBIcon, MDBModal, MDBModalBody,MDBModalHeader} from 'mdbreact';\nimport {handleSyn} from \"../../../RRH/Component/speech-syn\";\nimport {cancelSyn} from \"../../../RRH/Component/speech-syn\";\nimport q from './q.png'\nimport {url} from \"../../../../tool/fetch-help\";\n// import Joyride from 'react-joyride';\nimport {handleStuAskQues} from \"../../../../tool/report_system\";\n\n\n//------------------------SPEECH RECOGNITION-----------------------------\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n// const SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n\n\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = 'en-US';\n\n\nexport class AskQuestionCOR extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            backend:'',\n            modal1: false,\n            modal2: false,\n            redQuestion:'',\n            wolfQuestion:'',\n            answer:'',\n            q1:'',\n            q2:'',\n            q3:'',\n            change:false,\n            tag:0,\n            button:'',\n            example:'',\n            defaultQuestion:'',\n            listening: false,\n            // speechState:'Hold down the CTRL to speak...',\n            speechState:'Click the microphone icon to speak...',\n            hints:'',\n            final:'',\n            steps: [\n                {\n                    target: \".rrh\",\n                    content: \"Click here to ask questions\"\n                },\n                {\n                    target: \".bbw\",\n                    content: \"Click here to ask Big Bad Wolf questions\"\n                }\n            ]\n\n        };\n        // this.Button = this.Button.bind(this);\n        this.toggleListen = this.toggleListen.bind(this);\n        this.handleListen = this.handleListen.bind(this)\n\n    }\n    // componentDidMount() {\n    //     document.addEventListener(\"keydown\", this.onKeyDown);\n    //     document.addEventListener(\"keyup\", this.onKeyUp);\n    // }\n    // componentWillMount() {\n    //     document.removeEventListener(\"keydown\", this.onKeyDown);\n    //     document.removeEventListener(\"keyup\", this.onKeyUp);\n    // }\n    scoreRange=(rate)=>{\n        if(rate>0.9) return '1';\n        else if(rate>0.76) return '2';\n        // else if(rate>0.5) return '3';\n        else return '3';\n    };\n    myClick=(text)=>{\n        alert(text);\n    };\n\n    toggle = nr => () => {\n        cancelSyn();\n        let modalNumber = 'modal' + nr;\n        this.setState({\n            [modalNumber]: !this.state[modalNumber],\n            answer:''\n        });\n    };\n    // Button = (text) => {\n    //     if (text === 1 && this.state.backend.example1_exist === '1') {\n    //         return (\n    //             <MDBBtn\n    //                 color='white'\n    //                 size='sm'\n    //                 className='py-0'\n    //                 style={{borderRadius: '5px'}}\n    //                 onClick={() => {\n    //                     this.setState({\n    //                         example: 'e.g.'+ this.state.backend.example1\n    //                     })\n    //                 }}\n    //             >\n    //                 show example\n    //             </MDBBtn>\n    //         )\n    //     }\n    //     if (text === 2 && this.state.backend.example2_exist === '1') {\n    //         return (\n    //             <MDBBtn\n    //                 color='white'\n    //                 size='sm'\n    //                 className='py-0'\n    //                 style={{borderRadius: '5px'}}\n    //                 onClick={() => {\n    //                     this.setState({\n    //                         example: 'e.g.'+ this.state.backend.example2\n    //                     })\n    //                 }}\n    //             >\n    //                 show example\n    //             </MDBBtn>\n    //         )\n    //     }\n    //     if (text === 3 && this.state.backend.example3_exist === '1') {\n    //         return (\n    //             <MDBBtn\n    //                 color='white'\n    //                 size='sm'\n    //                 className='py-0'\n    //                 style={{borderRadius: '5px'}}\n    //                 onClick={() => {\n    //                     this.setState({\n    //                         example: 'e.g.'+ this.state.backend.example3\n    //                     })\n    //                 }}\n    //             >\n    //                 show example\n    //             </MDBBtn>\n    //         )\n    //     }\n    // };\n    searchAnswer=(value)=>{\n        cancelSyn();\n        const option={\n            method:'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body:JSON.stringify({question:value})\n        };\n        fetch(`${url}/FindQuestion/1`,option)\n            .then(response=>response.json())\n            .then(answer=>{\n                this.setState({\n                    backend:answer\n                });\n\n                let rate = parseFloat(answer[0][0]);\n                handleStuAskQues(answer[0],value);\n                //console.log(rate);\n                let type = this.scoreRange(rate);\n                switch (type) {\n                    case '1':\n                        this.setState({\n                            hints:'',\n                            answer:answer[0][2],\n                            tag:1,\n                            // example:this.Button(1)\n                        });\n                        handleSyn((answer[0][2].replace('?', '.')));\n                        break;\n                    case '2':\n                        this.setState({\n                            hints:'Which of these is the question you want to ask?',\n                            q1:answer[0][1],\n                            q2:answer[1][1],\n                            q3:answer[2][1],\n                            answer:'',\n                            tag:2,\n                        });\n                        handleSyn('Which of these is the question you want to ask?');\n\n                        break;\n                    case '3':\n                        this.setState({\n                            hints:'I don\\'t understand the question.  Can you ask it another way?',\n                            tag:3,\n                            answer:'',\n                            example:''\n                        });\n                        handleSyn('I don\\'t understand the question.  Can you ask it another way?')\n                }\n\n            })\n\n    };\n    //--------------Speech Recognition--------------\n    // onKeyDown = (e) => {\n    //     switch( e.keyCode) {\n    //         case 17:\n    //             this.toggleListen();\n    //             break\n    //     }\n    // };\n    // onKeyUp = (e) => {\n    //     switch( e.keyCode) {\n    //         case 17:\n    //             this.toggleListen();\n    //             break\n    //     }\n    // };\n    toggleListen() {\n        cancelSyn();\n        this.setState({\n            listening: !this.state.listening\n        }, this.handleListen)\n    }\n\n    handleListen() {\n\n        // console.log('listening?', this.state.listening)\n\n        if (this.state.listening) {\n            recognition.start();\n            recognition.onend = () => {\n                this.setState({\n                    speechState:'...continue listening...'\n                });\n                recognition.start()\n            }\n\n        } else {\n            recognition.stop();\n            recognition.onend = () => {\n                this.setState({\n                    // speechState:'Hold down the CTRL to speak...'\n                    speechState:'Click the microphone icon to speak...'\n                });\n            }\n        }\n\n        recognition.onstart = () => {\n            this.setState({\n                // speechState:'Listening...Release the CTRL to stop'\n                speechState:'Listening...click the icon to stop'\n            });\n        };\n\n        let finalTranscript = '';\n        recognition.onresult = event => {\n            let interimTranscript = '';\n\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n                const transcript = event.results[i][0].transcript;\n                if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n                else interimTranscript += transcript;\n            }\n\n            this.setState({\n                wolfQuestion:finalTranscript\n            });\n            document.getElementById('interim').innerHTML = interimTranscript;\n            document.getElementById('final').value = finalTranscript;\n\n            //-------------------------COMMANDS------------------------------------\n\n            const transcriptArr = finalTranscript.split(' ');\n            const stopCmd = transcriptArr.slice(-3, -1);\n            console.log('stopCmd', stopCmd);\n\n            if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening'){\n                recognition.stop();\n                recognition.onend = () => {\n                    console.log('Stopped listening per command');\n                    const finalText = transcriptArr.slice(0, -3).join(' ');\n                    document.getElementById('final').value = finalText\n                }\n            }\n        }\n\n        //-----------------------------------------------------------------------\n\n        recognition.onerror = event => {\n            console.log(\"Error occurred in recognition: \" + event.error)\n        }\n\n    }\n\n    render() {\n        // cancelSyn();\n        const { steps } = this.state;\n        return (\n            <div>\n                {/* <Joyride\n                    steps={steps}\n                    continuous={true}\n                    scrollToFirstStep={true}\n                    scrollToSteps={false}\n                    styles={{\n                        marginTop:'4000px',\n                        options: {\n\n                            primaryColor: '#CC0000',\n                            zIndex: 1000,\n                        }\n                    }}\n                /> */}\n\n                <div className={classes.fixed1}>\n                    <button style={{backgroundColor: 'transparent',borderColor:'0'}} className=\"button button rrh\" onClick={this.toggle(2)}>\n                        <img src={q}  alt=\"Little Red Riding Hood\" height=\"70\" width=\"55\"/></button>\n                </div>\n\n\n                <MDBModal isOpen={this.state.modal2} toggle={this.toggle(2)} centered size=\"lg\">\n\n                    <MDBModalBody className=\"text-center\">\n                        <MDBModalHeader\n                            // className={classes.title}\n                            toggle={this.toggle(2)}\n                            style={{color:'#CC0000', borderColor:'#CC0000'}}\n\n                        >\n                            <span>TRY ASKING A QUESTION</span>\n                        </MDBModalHeader>\n                        {/*<div className={classes.title} style={{color:'#CC0000', borderColor:'#CC0000'}}>*/}\n                            {/*<span>TRY ASKING A QUESTION</span>*/}\n                        {/*</div>*/}\n                        {this.state.tag===2?(null):(\n                            <div>\n                                <div className=\"d-flex justify-content-center align-content-center mt-3 mb-3\">\n                                    <div className=\"flex-grow-1\">\n                                        <form\n                                            autoComplete=\"off\"\n                                            onSubmit = {(e) => {\n                                                e.preventDefault();\n                                            }}\n                                        >\n                                        <input\n                                            id='final'\n                                            className={`form-control form-control-lg ${classes.searchInput}`}\n                                            placeholder=\"Ask your question here\"\n\n                                            style={{\n                                                borderStyle:'solid',\n                                                borderWidth:'1px',\n                                                borderColor:'#CC0000',\n                                                borderRadius:'15px',\n                                                fontFamily:'\\'Rajdhani\\', sans-serif',\n                                                fontSize:'20px',\n                                            }}\n                                            onChange={(e) => {\n                                                const str=e.target.value;\n                                                this.setState({\n                                                    wolfQuestion: str\n                                                });\n                                            }}\n                                            onKeyDown={(e) =>{\n                                                if(e.keyCode===13){\n                                                    // this.searchAnswer(this.state.wolfQuestion)\n                                                    if(this.state.wolfQuestion===''){\n                                                        alert('Please input your question')\n                                                    }\n                                                    else{\n                                                        this.searchAnswer(this.state.wolfQuestion)\n                                                    }\n                                                }\n                                            }\n                                            }\n                                        />\n                                        </form>\n                                    </div>\n                                    <div className=\"ml-3\">\n                                        <MDBBtn\n                                            tag=\"a\" floating color=\"red\" style={{margin:'6px'}}\n                                            onClick={()=>{\n                                                // this.searchAnswer(this.state.wolfQuestion)\n                                                if(this.state.wolfQuestion===''){\n                                                    alert('Please input your question')\n                                                }\n                                                else{\n                                                    this.searchAnswer(this.state.wolfQuestion)\n                                                }\n                                                }\n                                            }\n                                                >\n                                                <MDBIcon icon=\"question\" />\n                                                </MDBBtn>\n                                                </div>\n                                                <div className=\"ml-1\">\n                                                <MDBBtn\n                                                tag=\"a\" floating color=\"white\" style={{margin:'6px'}}\n                                                onClick={this.toggleListen}\n                                                >\n                                                <MDBIcon icon=\"microphone\" className='red-text'/>\n                                                </MDBBtn>\n\n                                                </div>\n                                                </div>\n                                                <div className='px-2'>\n                                                <div className={classes.body}>{this.state.speechState}</div>\n                                                <div id='interim'></div>\n                                                </div>\n                                                </div>\n                                                )}\n\n                                        <div className=\"mt-3 px-2\">\n                                            <MDBCard\n                                                size=\"8\"\n                                                text=\"white\"\n                                                className=\"py-3 px-3 w-100 grey lighten-4\"\n                                                style={{boxShadow:'none'}}\n                                            >\n                                                <p\n                                                    style={{borderStyle:'solid',borderColor:'#CC0000',borderWidth:'0 0 1px 0'}}\n                                                    className={classes.pb1}\n                                                >Hints/Answer</p>\n\n                                                {this.state.tag===2? (\n                                                    <div>\n                                                        <p className={classes.pb3}>{this.state.hints}</p>\n                                                        <div\n                                                            onClick={()=>{\n                                                                this.setState({\n                                                                    tag:1,\n                                                                    hints:'',\n                                                                    answer:this.state.backend[0][2],\n                                                                    // example:this.Button(1),\n                                                                });\n                                                                handleSyn(this.state.backend[0][2])\n                                                            }}\n                                                            className={classes[\"select-ques2\"]}\n                                                        >\n                                                            {this.state.q1}\n                                                        </div>\n                                                        <div\n                                                            onClick={()=>{\n                                                                this.setState({\n                                                                    tag:1,\n                                                                    hints:'',\n                                                                    answer:this.state.backend[1][2],\n                                                                    // example:this.Button(2)\n                                                                });\n                                                                handleSyn(this.state.backend[1][2])\n                                                            }}\n                                                            className={classes[\"select-ques2\"]}\n                                                        >\n                                                            {this.state.q2}\n                                                        </div>\n                                                        <div\n                                                            onClick={()=>{\n                                                                this.setState({\n                                                                    tag:1,\n                                                                    hints:'',\n                                                                    answer:this.state.backend[2][2],\n                                                                    // example:this.Button(3)\n                                                                });\n                                                                handleSyn(this.state.backend[2][2])\n                                                            }}\n                                                            className={classes[\"select-ques2\"]}\n                                                        >\n                                                            {this.state.q3}\n                                                        </div>\n                                                        <div\n                                                            onClick={()=>{\n                                                                this.setState({\n                                                                    tag:1,\n                                                                    hints:'Could you rephrase the question？',\n                                                                    answer:'',\n                                                                    example:''\n                                                                });\n                                                                handleSyn('Could you rephrase the question')\n                                                            }}\n                                                            className={classes[\"select-ques2\"]}\n                                                        >\n                                                            None of above\n                                                        </div>\n                                                    </div>\n                                                ):(\n                                                    <div>\n                                                        <p className={classes.pb3}>{this.state.hints}</p>\n                                                        <p\n                                                            className={classes.pb2}\n                                                        >\n                                                            {this.state.answer}<span>{this.state.button}</span>\n                                                        </p>\n                                                        <p className={classes.pb4}>\n                                                            {this.state.example}\n                                                        </p>\n\n                                                    </div>\n\n                                                )}\n                                            </MDBCard>\n\n                                        </div>\n\n                                    </MDBModalBody>\n                                </MDBModal>\n\n                            </div>\n                        );\n                        }\n                        }\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/RRH/Component/speech-syn/index.js",["125"],"\n'use strict'\n\n\n\n//------------------------SPEECH RECOGNITION-----------------------------\n\n\n//const synth = window.speechSynthesis\n// const synth = speechSynthesis\n\n//-----------------------JS Global Variable----------------------------\n\n//\n// const voices = [];\n\n//------------------------COMPONENT-----------------------------\n\nexport const handleSyn=(text)=>{\n    //speak(text);\n    let synth = window.speechSynthesis;\n    let voices = synth.getVoices();\n    let utterThis = new SpeechSynthesisUtterance(text);\n    console.log(voices);\n    utterThis.pitch = 0.8;\n    utterThis.rate = 0.8;\n    for(let i = 0; i < voices.length ; i++) {\n        if(voices[i].name === 'Samantha' ||voices[i].name === 'Microsoft Zira Desktop - English (United States)'){\n            utterThis.voice = voices[i];\n        }\n    }\n    //utterThis.voice = voices[34];\n    synth.speak(utterThis);\n\n};\nexport const cancelSyn=()=>{\n    let synth = window.speechSynthesis;\n    synth.cancel();\n}\n// const populateVoiceList=()=>{\n//     let voices = synth.getVoices();\n//     for(let i = 0; i < voices.length ; i++) {\n//         let option = document.createElement('option');\n//         option.textContent = voices[i].name + ' (' + voices[i].lang + ')';\n//         if(voices[i].default) {\n//             option.textContent += ' -- DEFAULT';\n//         }\n//\n//         option.setAttribute('data-lang', 'en-US');\n//         option.setAttribute('data-name', 'Samantha');\n//\n//     }\n// };\n// const speak=(text)=>{\n//\n//     let voices = synth.getVoices();\n//\n//     let utterThis = new SpeechSynthesisUtterance(text);\n//\n//     for(let i = 0; i < voices.length ; i++) {\n//         if(voices[i].name === 'Samantha'){\n//             utterThis.voice = voices[i];\n//         }\n//     }\n// }\n\n\n\n\n\n\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/Worksheet/mul-answer-component/index.js",["126","127","128","129","130"],"import React from 'react';\n\n\nimport {url} from \"../../../../tool/fetch-help\";\nimport classes from './index.module.css'\nimport {cancelSyn, handleSyn} from \"../../../RRH/Component/speech-syn\";\nimport {MDBBtn, MDBCard, MDBIcon, MDBModal, MDBModalBody} from \"mdbreact\";\n\nexport class MulAnswerComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer:'',\n            render:1,\n            hint:'',\n            feedback:'',\n            count:[0,1,2,3,4,5,6,7,8,9],\n            answered:[],\n            modal2: false,\n            array:[],\n            array2:[],\n            rest:[],\n            finish:false,\n            done:false\n        };\n        this.answerList=[\n            'Quickly and easily assembled, taken apart and packed for transportation',\n            'Able to be assembled and put into operating condition in about 1 hour',\n            'Carries two persons (combined weight: 350 pounds)',\n            'Carries fuel for 125-mile flight',\n            'Speed: 40 mph',\n            'Able to serve in any country (for field service)',\n            'Simple and transportable starting device',\n            'Able to land in fields without a specially prepared spot and without damaging its structure',\n            'Device permits safe descent in case of an accident',\n            'Simple in construction and operation'\n        ];\n\n\n    }\n    // componentDidMount() {\n    //     const option={\n    //         method:'GET',\n    //         headers: {\n    //             'content-type': 'application/json',\n    //         }\n    //     };\n    //     fetch(`${url}/feedback/CN/question`,option)\n    //         .then(response=>response.json())\n    //         .then(question=>{\n    //             this.setState({\n    //                 backend:question,\n    //                 render:1\n    //             })\n    //         })\n    // }\n    // componentWillMount() {\n    //\n    // }\n    isFinsh = ()=>{\n        return this.state.array2.length === 10;\n    };\n    // finishHint = ()=>{\n    //     if(this.isFinsh()){\n    //         this.setState({\n    //             hint:''\n    //         })\n    //     }\n    // }\n    answeredArray = (id, text)=>{\n\n        if(this.state.array.indexOf(id) === -1){\n            this.state.array.push(id);\n            this.state.array2.push(text)\n        }\n        else if(this.state.array.indexOf(id) > -1){\n            this.setState({\n                hint:'It was already answered. Please try other answers'\n            })\n        }\n    };\n    restArray = (count) => {\n        let tmp=[];\n        for (let i=0; i<count.length;i++){\n            tmp.push(this.answerList[count[i]])\n        }\n        this.setState({\n            rest:tmp,\n            hint:'',\n            feedback:''\n        })\n    };\n\n    updateCount = (id, count)=>{\n        for (let i=0; i<count.length;i++){\n            if (count[i] === id){\n                count.splice(i, 1);\n            }\n        }\n        this.setState({\n            count:count\n        });\n        // return array\n    };\n    updateHint=(array)=>{\n        let tmp=[];\n        for (let i=0; i<array.length;i++){\n            tmp.push(array[i]+1)\n        }\n        return tmp.join(',')\n    };\n    updateAnswered=(id,array)=>{\n        if(array.indexOf(id) === -1){\n            array.push(id);\n        }\n\n        return array\n    };\n    scoreRange=(rate)=>{\n        if(rate>0.9) return '1';\n        else if(rate>0.78) return '2';\n        else if(rate>0.55) return '3';\n        else return '4';\n    };\n\n    searchAnswer=(value)=>{\n        //cancelSyn()\n        //console.log(this.state.backend.content[this.state.index].id);\n        const option={\n            method:'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body:JSON.stringify({\n                question_id:3,\n                answer:value,\n            })\n        };\n        fetch(`${url}/question3`,option)\n            .then(response=>response.json())\n            .then(answer=>{\n                this.setState({\n                    backendjson:answer,\n                    done:false\n                });\n\n                let type = this.scoreRange(answer[0][0]);\n                switch (type) {\n                    case '1':\n                        let hint;\n                        if(this.state.array.indexOf(answer[0][3]) > -1){\n                            hint='It was already answered. Please try other answers'\n                        }\n                        else hint='Yes! You got it.';\n                        this.answeredArray(this.state.backendjson[0][3],this.answerList[this.state.backendjson[0][3]]);\n                        this.updateCount(this.state.backendjson[0][3], this.state.count);\n                        this.setState({\n                            feedback:'',\n                            // index:this.state.index + 1,\n                            type:1,\n                            hint:hint,\n                            answer:'',\n                            // count: this.updateCount(parseInt(answer[0][3]), this.state.count),\n                            // answered: this.updateAnswered(parseInt(answer[0][3]), this.state.answered)\n                        });\n                        //handleSyn('Yes! You got it.');\n                        // if(this.state.index <= this.state.backend.content.length){\n                        //     //handleSyn(this.state.backend.content[this.state.index].question.replace('?', '.'))\n                        // }\n                        break;\n                    case '2':\n                        this.setState({\n                            hint:'Is that what you are answering?',\n                            feedback:answer[0][2],\n                            type:2\n                        });\n                        //handleSyn('Is that what you are answering');\n                        //handleSyn((answer.answer.replace('?', '.')));\n\n                        break;\n                    case '3':\n                        this.answeredArray(this.state.backendjson[0][3],this.answerList[this.state.backendjson[0][3]]);\n                        this.updateCount(this.state.backendjson[0][3], this.state.count);\n                        this.setState({\n                            feedback:'The right answer is:  '+answer[0][2],\n                            hint:'Wrong answer',\n                            type:3\n                        });\n                        break;\n                    case '4':\n                        this.setState({\n                            feedback:'',\n                            hint:'This is not a correct answer. Answer all you can one by one and then press \"Done\"',\n                            type:4\n                        });\n                        //handleSyn('No, the answer is');\n                        //handleSyn((answer.answer.replace('?', '.')));\n                }\n            })\n    };\n    toggle = nr => () => {\n        let modalNumber = 'modal' + nr;\n        this.setState({\n            [modalNumber]: !this.state[modalNumber],\n            answer:''\n        });\n    };\n\n\n    render() {\n        // console.log(this.state.count);\n        // console.log(this.state.answered);\n        cancelSyn();\n\n        if (this.state.render === 1){\n            return (\n                <div  style={{padding: '0 5px', marginTop:'5px'}}>\n                    {\n\n                        this.state.array2.map((item, index)=>{\n                        return(\n                            <div>\n                                    {index+1})  {item}\n                            </div>\n                        )\n\n                    })}\n                    {\n                        !this.isFinsh()?(\n                            <div>\n                                <textarea\n                                    placeholder=\"Answer here\"\n                                    className=\"form-control\"\n                                    style={{fontSize: '18px',borderColor:'#CC0000'}}\n                                    rows=\"3\"\n                                    onChange={(e) => {\n                                        this.setState({\n                                            answer: e.target.value\n                                        });\n                                    }}\n                                    value={this.state.answer}\n                                />\n                                <div className={classes[\"align-end\"]}>\n                                    <button\n                                        className={classes.btn}\n                                        onClick={()=>{\n                                            this.searchAnswer(this.state.answer);\n                                        }}\n                                    >\n                                        Submit\n                                    </button>\n                                    <button\n                                        className={`${classes.btn} ml-2`}\n                                        onClick={()=>{\n                                            this.restArray(this.state.count)\n                                            this.setState({\n                                                done:true,\n                                                answer:''\n                                            })\n                                        }}\n                                    >\n                                        Done\n                                    </button>\n                                </div>\n                            </div>\n                        ):(<div className={classes.hint2}>\n                            {/*{this.finishHint()}*/}\n                            All answers have been answered.\n                        </div>)\n                    }\n\n                    <div className={classes.hint2}>\n                        {this.state.hint}\n                    </div>\n                    <div className={classes.answer}>\n                        {this.state.feedback}\n                        {this.state.done?(\n                            <div>\n                                <div>You missed these standards: </div>\n                                {\n                                    this.state.rest.map((item, index)=>{\n                                        return(\n                                            <div>\n                                                {index+1})  {item}\n                                            </div>\n                                        )\n                                    })}\n                            </div>\n                        ):(null)}\n                    </div>\n                    <div>\n                        {this.state.type===2?(\n                            <div className='text-center'>\n                                <MDBBtn\n                                    tag=\"a\" floating className=\"green\" size='1x'\n                                    onClick={()=>{\n                                        this.setState({\n                                            feedback:'',\n                                            // index:this.state.index + 1,\n                                            type:1,\n                                            hint:'Yes! You got it.',\n                                            answer:'',\n                                            // count: this.updateCount(parseInt(this.state.backendjson[0][3]), this.state.count),\n                                            // answered: this.updateAnswered(parseInt(this.state.backendjson[0][3]), this.state.answered)\n                                        });\n                                        this.answeredArray(this.state.backendjson[0][3],this.answerList[this.state.backendjson[0][3]]);\n                                        this.updateCount(this.state.backendjson[0][3], this.state.count);\n                                    }}\n                                >\n                                    <MDBIcon icon=\"check\" />\n                                </MDBBtn>\n                                <MDBBtn\n                                    tag=\"a\" floating className=\"red lighten-1\" size='1x'\n                                    onClick={()=>{\n                                        this.setState({\n                                            feedback:'The right answer is:  '+ this.answerList[this.state.backendjson[0][3]]+'. You can input your next answer in the box',\n                                            // hint:'You can continue ',\n                                            // count: this.updateCount(parseInt(this.state.backendjson[0][3]), this.state.count),\n                                            // answered: this.updateAnswered(parseInt(this.state.backendjson[0][3]), this.state.answered),\n                                            type:3,\n                                            answer:''\n                                        });\n                                        this.answeredArray(this.state.backendjson[0][3],this.answerList[this.state.backendjson[0][3]]);\n                                        this.updateCount(this.state.backendjson[0][3], this.state.count);\n                                    }}\n                                >\n                                    <MDBIcon icon=\"times\" />\n                                </MDBBtn>\n                            </div>\n\n                        ):(\n                            null\n                        )}\n                    </div>\n                </div>\n            );\n        }\n        else{\n            return(\n                null\n            );\n        }\n    }\n}\n","/Users/leon/Documents/VSCodeProject/COR_test/src/tool/report_system/index.js",["131","132","133","134"],"//const url  = 'http://127.0.0.1:8080';\n// const url  = 'http://47.252.83.229:8081';\nconst url = 'https://admin.alistempirefoundation.org';\nconst formatTime = (timestamp)=>{\n    const date = new Date(timestamp);\n    let Y = date.getFullYear() + '-';\n    let M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';\n    let D = date.getDate() + ' ';\n    let h = date.getHours() + ':';\n    let m = date.getMinutes() + ':';\n    let s = date.getSeconds();\n    console.log(Y+M+D+h+m+s);\n    return (Y+M+D+h+m+s)\n\n};\nconst quesList=[\n    'What is a requirements document?',\n    'What is a statement of work?',\n    'What does SOW stand for?',\n    ' What is a statement of objectives?',\n    'What does SOO stand for?',\n    'When do you use an SOW vs an SOO?',\n    'What is a performance work statement?',\n    'What does PWS stand for?',\n    'What makes an outcome measurable?',\n    'What is a specification?',\n    'What\\'s the difference between a specification and an outcome?',\n    'Why do we have requirements documents?',\n    'What is a statement of objectives?',\n    'Which gives the offeror more flexibility, a statement of work or a statement of objectives?',\n    'What is a performance work statement?',\n    'It you are writing a performance work statement for an airplane, is the requirement \"The plane should not require high speeds in order for take off\" a measurable outcome?',\n    'What would be a better way to express the term high speeds in the performance work statement, so that it would be a measurable outcome?',\n    'what do we want to accomplish as the end result of this contract?',\n    'what tasks must be accomplished to give us the end result?',\n    'how much error will we accept?',\n    'how will we determine that success has been achieved?',\n    'how will we reward good performance or address poor performance?'\n];\nconst scoreRangeAsk=(rate)=>{\n    if(rate>0.9) return '1';\n    else if(rate>0.76) return '2';\n    // else if(rate>0.5) return '3';\n    else return '3';\n};\nconst scoreRangeAssess=(rate)=>{\n    if(rate>0.9) return '1';\n    else if(rate>0.8) return '2';\n    else if(rate>0.5) return '3';\n    else return '4';\n};\nexport const handleStuAskQues=(ele, content) =>{\n    let rate = parseFloat(ele[0]);\n    let isCovered,question_content,question_id,system_answer;\n    let timestamp = new Date().getTime();\n    if(rate>0.76){\n        isCovered = 1;\n        question_content = ele[1];\n        for (let i =0;i<quesList.length;i++){\n            if (quesList[i] == ele[1]){\n                question_id = i\n            }\n        }\n        system_answer = ele[2]\n\n    }\n    else{\n        isCovered = 0;\n        question_content ='';\n        system_answer = '';\n        question_id = -1;\n    }\n    const option={\n        method:'POST',\n        headers: {\n            'content-type': 'application/json',\n        },\n        body:JSON.stringify({\n            //id:,\n            content:content,\n            isCovered:isCovered,\n            rate:rate,\n            question_content:question_content,\n            question_id:question_id,\n            system_answer:system_answer,\n            time:formatTime(timestamp)\n        })\n    };\n    fetch(`${url}/student_ask_question`,option)\n        .then(response=>response.json())\n        .then(res=>{\n            console.log('fetch OK')\n        });\n};\nexport const handleSysAskQues=(ele, content,question) =>{\n    let rate = parseFloat(ele[0]);\n    let student_answer = content;\n    let question_content,question_id,right_answer,isRight;\n    let timestamp = new Date().getTime();\n    for (let i=0;i<quesList.length;i++){\n        //console.log(quesList[i]);\n        if (quesList[i] == question){\n            question_id = i\n        }\n    }\n    question_content = ele[1];\n    if(rate>0.8){\n        isRight = 1;\n        right_answer = ele[3]\n    }\n    else{\n        isRight = 0;\n        right_answer = '';\n    }\n    const option={\n        method:'POST',\n        headers: {\n            'content-type': 'application/json',\n        },\n        body:JSON.stringify({\n            // id:,\n            question_content:question_content,\n            question_id:question_id,\n            student_answer:student_answer,\n            right_answer:right_answer,\n            rate:rate,\n            isRight:isRight,\n            time:formatTime(timestamp)\n        })\n    };\n    fetch(`${url}/system_ask_question`,option)\n        .then(response=>response.json())\n        .then(res=>{\n            console.log('fetch OK')\n        });\n};\n\n","/Users/leon/Documents/VSCodeProject/COR_test/src/page/COR/Worksheet/answer-component/index.js",["135","136"],"import React from 'react';\n\n\nimport {url} from \"../../../../tool/fetch-help\";\nimport classes from './index.module.css'\nimport {MDBBtn, MDBIcon} from \"mdbreact\";\nimport {cancelSyn} from \"../../../RRH/Component/speech-syn\";\n\nexport class AnswerComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer:'',\n            render:1,\n            hint:'',\n            feedback:''\n\n        };\n    }\n    // componentDidMount() {\n    //     const option={\n    //         method:'GET',\n    //         headers: {\n    //             'content-type': 'application/json',\n    //         }\n    //     };\n    //     fetch(`${url}/feedback/CN/question`,option)\n    //         .then(response=>response.json())\n    //         .then(question=>{\n    //             this.setState({\n    //                 backend:question,\n    //                 render:1\n    //             })\n    //         })\n    // }\n    // componentWillMount() {\n    //\n    // }\n    scoreRange=(rate)=>{\n        if(rate>0.9) return '1';\n        else if(rate>0.78) return '2';\n        // else if(rate>0.55) return '3';\n        else return '3';\n    };\n\n    searchAnswer=(value)=>{\n        //cancelSyn()\n        //console.log(this.state.backend.content[this.state.index].id);\n        const option={\n            method:'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body:JSON.stringify({\n                question_id:this.props.id,\n                answer:value,\n            })\n        };\n        fetch(`${url}/CheckAnswer/1`,option)\n            .then(response=>response.json())\n            .then(answer=>{\n                this.setState({\n                    backendjson:answer\n                });\n                let type = this.scoreRange(answer[0][0]);\n                switch (type) {\n                    case '1':\n                        this.setState({\n                            feedback:'',\n                            // index:this.state.index + 1,\n                            type:1,\n                            hint:'Yes! You got it.'\n                        });\n                        //handleSyn('Yes! You got it.');\n                        // if(this.state.index <= this.state.backend.content.length){\n                        //     //handleSyn(this.state.backend.content[this.state.index].question.replace('?', '.'))\n                        // }\n                        break;\n                    case '2':\n                        this.setState({\n                            hint:'Is that what you are answering?',\n                            feedback:answer[0][3],\n                            type:2\n                        });\n                        //handleSyn('Is that what you are answering');\n                        //handleSyn((answer.answer.replace('?', '.')));\n\n                        break;\n                    case '3':\n                        this.setState({\n                            feedback:'The right answer is:  '+answer[0][3],\n                            hint:'Wrong answer',\n                            type:3\n                        });\n                        break;\n                    case '4':\n                        this.setState({\n                            feedback:'',\n                            hint:'I cannot understand. Could you rephrase your words?',\n                            type:4\n                        });\n                        //handleSyn('No, the answer is');\n                        //handleSyn((answer.answer.replace('?', '.')));\n                }\n            })\n    };\n\n\n\n    render() {\n        if (this.state.render === 1){\n            return (\n                <div  style={{padding: '0 5px', marginTop:'5px'}}>\n                     <textarea\n                         placeholder=\"Answer here\"\n                         className=\"form-control\"\n                         style={{fontSize: '18px',borderColor:'#CC0000'}}\n                         rows=\"3\"\n                         onChange={(e) => {\n                             this.setState({\n                                 answer: e.target.value\n                             });\n                         }}\n                     />\n                    <div className={classes[\"align-end\"]}>\n                        <button\n                            className={classes.btn}\n                            onClick={()=>{this.searchAnswer(this.state.answer)}}\n                        >\n                            Submit\n                        </button>\n                    </div>\n\n                    {/*<div className={classes.hint}>Feedback</div>*/}\n                    <div className={classes.hint2}>\n                        {this.state.hint}\n                    </div>\n                    <div className={classes.answer}>\n                        {this.state.feedback}\n                    </div>\n                    <div>\n                        {this.state.type===2?(\n                            <div className='text-center'>\n                                <MDBBtn\n                                    tag=\"a\" floating className=\"green\" size='1x'\n                                    onClick={()=>{\n                                        this.setState({\n                                            feedback:'',\n                                            // index:this.state.index + 1,\n                                            type:1,\n                                            hint:'Yes! You got it.',\n                                        });\n                                    }}\n                                >\n                                    <MDBIcon icon=\"check\" />\n                                </MDBBtn>\n                                <MDBBtn\n                                    tag=\"a\" floating className=\"red lighten-1\" size='1x'\n                                    onClick={()=>{\n                                        this.setState({\n                                            feedback:'The right answer is:  '+this.state.backendjson[0][3],\n                                            hint:'Wrong answer',\n                                            type:3\n                                        });\n                                    }}\n                                >\n                                    <MDBIcon icon=\"times\" />\n                                </MDBBtn>\n                            </div>\n\n                        ):(\n                            null\n                        )}\n                    </div>\n                </div>\n            );\n        }\n        else{\n            return(\n                null\n            );\n        }\n    }\n}\n",{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":3,"column":9,"nodeType":"143","messageId":"144","endLine":3,"endColumn":22},{"ruleId":"141","severity":1,"message":"145","line":3,"column":24,"nodeType":"143","messageId":"144","endLine":3,"endColumn":34},{"ruleId":"141","severity":1,"message":"146","line":5,"column":17,"nodeType":"143","messageId":"144","endLine":5,"endColumn":26},{"ruleId":"141","severity":1,"message":"147","line":5,"column":9,"nodeType":"143","messageId":"144","endLine":5,"endColumn":23},{"ruleId":"141","severity":1,"message":"148","line":4,"column":5,"nodeType":"143","messageId":"144","endLine":4,"endColumn":17},{"ruleId":"141","severity":1,"message":"149","line":6,"column":5,"nodeType":"143","messageId":"144","endLine":6,"endColumn":18},{"ruleId":"141","severity":1,"message":"150","line":7,"column":5,"nodeType":"143","messageId":"144","endLine":7,"endColumn":19},{"ruleId":"141","severity":1,"message":"151","line":8,"column":5,"nodeType":"143","messageId":"144","endLine":8,"endColumn":18},{"ruleId":"141","severity":1,"message":"152","line":9,"column":5,"nodeType":"143","messageId":"144","endLine":9,"endColumn":15},{"ruleId":"141","severity":1,"message":"153","line":10,"column":5,"nodeType":"143","messageId":"144","endLine":10,"endColumn":19},{"ruleId":"141","severity":1,"message":"154","line":12,"column":5,"nodeType":"143","messageId":"144","endLine":12,"endColumn":11},{"ruleId":"141","severity":1,"message":"155","line":13,"column":5,"nodeType":"143","messageId":"144","endLine":13,"endColumn":11},{"ruleId":"141","severity":1,"message":"156","line":13,"column":13,"nodeType":"143","messageId":"144","endLine":13,"endColumn":19},{"ruleId":"141","severity":1,"message":"157","line":16,"column":8,"nodeType":"143","messageId":"144","endLine":16,"endColumn":12},{"ruleId":"141","severity":1,"message":"158","line":18,"column":9,"nodeType":"143","messageId":"144","endLine":18,"endColumn":12},{"ruleId":"141","severity":1,"message":"159","line":19,"column":9,"nodeType":"143","messageId":"144","endLine":19,"endColumn":18},{"ruleId":"141","severity":1,"message":"160","line":80,"column":13,"nodeType":"143","messageId":"144","endLine":80,"endColumn":23},{"ruleId":"141","severity":1,"message":"161","line":4,"column":5,"nodeType":"143","messageId":"144","endLine":4,"endColumn":13},{"ruleId":"141","severity":1,"message":"162","line":8,"column":5,"nodeType":"143","messageId":"144","endLine":8,"endColumn":12},{"ruleId":"141","severity":1,"message":"150","line":9,"column":5,"nodeType":"143","messageId":"144","endLine":9,"endColumn":19},{"ruleId":"141","severity":1,"message":"149","line":10,"column":5,"nodeType":"143","messageId":"144","endLine":10,"endColumn":18},{"ruleId":"141","severity":1,"message":"151","line":11,"column":5,"nodeType":"143","messageId":"144","endLine":11,"endColumn":18},{"ruleId":"141","severity":1,"message":"152","line":12,"column":5,"nodeType":"143","messageId":"144","endLine":12,"endColumn":15},{"ruleId":"141","severity":1,"message":"163","line":14,"column":8,"nodeType":"143","messageId":"144","endLine":14,"endColumn":15},{"ruleId":"141","severity":1,"message":"154","line":3,"column":24,"nodeType":"143","messageId":"144","endLine":3,"endColumn":30},{"ruleId":"141","severity":1,"message":"154","line":6,"column":9,"nodeType":"143","messageId":"144","endLine":6,"endColumn":15},{"ruleId":"141","severity":1,"message":"164","line":6,"column":17,"nodeType":"143","messageId":"144","endLine":6,"endColumn":24},{"ruleId":"141","severity":1,"message":"155","line":6,"column":26,"nodeType":"143","messageId":"144","endLine":6,"endColumn":32},{"ruleId":"141","severity":1,"message":"162","line":6,"column":34,"nodeType":"143","messageId":"144","endLine":6,"endColumn":41},{"ruleId":"141","severity":1,"message":"165","line":6,"column":43,"nodeType":"143","messageId":"144","endLine":6,"endColumn":55},{"ruleId":"141","severity":1,"message":"156","line":6,"column":57,"nodeType":"143","messageId":"144","endLine":6,"endColumn":63},{"ruleId":"166","severity":1,"message":"167","line":93,"column":17,"nodeType":"168","messageId":"169","endLine":124,"endColumn":18},{"ruleId":"141","severity":1,"message":"170","line":133,"column":21,"nodeType":"143","messageId":"144","endLine":133,"endColumn":26},{"ruleId":"141","severity":1,"message":"165","line":5,"column":43,"nodeType":"143","messageId":"144","endLine":5,"endColumn":55},{"ruleId":"166","severity":1,"message":"167","line":105,"column":9,"nodeType":"168","messageId":"169","endLine":183,"endColumn":10},{"ruleId":"166","severity":1,"message":"167","line":210,"column":17,"nodeType":"168","messageId":"169","endLine":256,"endColumn":18},{"ruleId":"141","severity":1,"message":"170","line":355,"column":21,"nodeType":"143","messageId":"144","endLine":355,"endColumn":26},{"ruleId":"171","severity":1,"message":"172","line":1,"column":1,"nodeType":"173","messageId":"174","endLine":1,"endColumn":13,"fix":"175"},{"ruleId":"166","severity":1,"message":"167","line":166,"column":17,"nodeType":"168","messageId":"169","endLine":196,"endColumn":18},{"ruleId":"141","severity":1,"message":"170","line":295,"column":17,"nodeType":"143","messageId":"144","endLine":295,"endColumn":22},{"ruleId":"171","severity":1,"message":"172","line":2,"column":1,"nodeType":"173","messageId":"174","endLine":2,"endColumn":13,"fix":"176"},{"ruleId":"141","severity":1,"message":"159","line":6,"column":20,"nodeType":"143","messageId":"144","endLine":6,"endColumn":29},{"ruleId":"141","severity":1,"message":"164","line":7,"column":17,"nodeType":"143","messageId":"144","endLine":7,"endColumn":24},{"ruleId":"141","severity":1,"message":"177","line":7,"column":35,"nodeType":"143","messageId":"144","endLine":7,"endColumn":43},{"ruleId":"141","severity":1,"message":"165","line":7,"column":45,"nodeType":"143","messageId":"144","endLine":7,"endColumn":57},{"ruleId":"166","severity":1,"message":"167","line":148,"column":17,"nodeType":"168","messageId":"169","endLine":198,"endColumn":18},{"ruleId":"141","severity":1,"message":"178","line":40,"column":7,"nodeType":"143","messageId":"144","endLine":40,"endColumn":20},{"ruleId":"141","severity":1,"message":"179","line":46,"column":7,"nodeType":"143","messageId":"144","endLine":46,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":60,"column":29,"nodeType":"182","messageId":"183","endLine":60,"endColumn":31},{"ruleId":"180","severity":1,"message":"181","line":102,"column":25,"nodeType":"182","messageId":"183","endLine":102,"endColumn":27},{"ruleId":"141","severity":1,"message":"184","line":7,"column":9,"nodeType":"143","messageId":"144","endLine":7,"endColumn":18},{"ruleId":"166","severity":1,"message":"167","line":66,"column":17,"nodeType":"168","messageId":"169","endLine":104,"endColumn":18},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'HashRouter' is defined but never used.","'Component' is defined but never used.","'AskQuestionCOR' is defined but never used.","'MDBContainer' is defined but never used.","'MDBSideNavCat' is defined but never used.","'MDBSideNavItem' is defined but never used.","'MDBSideNavNav' is defined but never used.","'MDBSideNav' is defined but never used.","'MDBSideNavLink' is defined but never used.","'MDBBtn' is defined but never used.","'MDBCol' is defined but never used.","'MDBRow' is defined but never used.","'file' is defined but never used.","'url' is defined but never used.","'handleSyn' is defined but never used.","'passMethod' is assigned a value but never used.","'MDBInput' is defined but never used.","'MDBIcon' is defined but never used.","'classes' is defined but never used.","'MDBCard' is defined but never used.","'MDBModalBody' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'steps' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"187","text":"188"},{"range":"189","text":"188"},"'MDBModal' is defined but never used.","'scoreRangeAsk' is assigned a value but never used.","'scoreRangeAssess' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'cancelSyn' is defined but never used.","no-global-assign","no-unsafe-negation",[0,12],"",[1,13]]